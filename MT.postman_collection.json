{
	"info": {
		"_postman_id": "3f5449a1-ddbd-4cdd-b249-64378c3a9c41",
		"name": "MT",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "5635061"
	},
	"item": [
		{
			"name": "Usuarios",
			"item": [
				{
					"name": "Get data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/usuarios?with=servidoresTemporariosCompleto,servidoresEfetivosCompleto,fotoPessoas",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"usuarios"
							],
							"query": [
								{
									"key": "with",
									"value": "servidoresTemporariosCompleto,servidoresEfetivosCompleto,fotoPessoas"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": [
						{
							"name": "Get data",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/usuarios?with=servidoresTemporariosCompleto,servidoresEfetivosCompleto,fotoPessoas",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"usuarios"
									],
									"query": [
										{
											"key": "with",
											"value": "servidoresTemporariosCompleto,servidoresEfetivosCompleto,fotoPessoas"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 31 Mar 2025 13:30:46 GMT"
								},
								{
									"key": "Server",
									"value": "Apache/2.4.62 (Debian)"
								},
								{
									"key": "X-Powered-By",
									"value": "PHP/8.3.19"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, private"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "60"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "59"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5, max=100"
								},
								{
									"key": "Connection",
									"value": "Keep-Alive"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"data\": {\n        \"current_page\": 1,\n        \"data\": [\n            {\n                \"id\": 1,\n                \"nome\": \"Sr. Cláudio Mendonça Alcantara\",\n                \"email\": \"vserra@example.net\",\n                \"email_verified_at\": null,\n                \"cpf\": \"339.564.376-61\",\n                \"data_nascimento\": \"1982-05-28T00:00:00.000000Z\",\n                \"created_at\": null,\n                \"updated_at\": null,\n                \"deleted_at\": null,\n                \"servidores_temporarios_completo\": {\n                    \"id\": 1,\n                    \"user_id\": 1,\n                    \"data_admissao\": \"1970-05-21\",\n                    \"data_desligamento\": null,\n                    \"created_at\": null,\n                    \"updated_at\": null,\n                    \"deleted_at\": null,\n                    \"user\": {\n                        \"id\": 1,\n                        \"nome\": \"Sr. Cláudio Mendonça Alcantara\",\n                        \"email\": \"vserra@example.net\",\n                        \"email_verified_at\": null,\n                        \"cpf\": \"339.564.376-61\",\n                        \"data_nascimento\": \"1982-05-28T00:00:00.000000Z\",\n                        \"created_at\": null,\n                        \"updated_at\": null,\n                        \"deleted_at\": null\n                    }\n                },\n                \"servidores_efetivos_completo\": {\n                    \"id\": 1,\n                    \"user_id\": 1,\n                    \"matricula\": \"as-3546\",\n                    \"created_at\": null,\n                    \"updated_at\": null,\n                    \"deleted_at\": null,\n                    \"user\": {\n                        \"id\": 1,\n                        \"nome\": \"Sr. Cláudio Mendonça Alcantara\",\n                        \"email\": \"vserra@example.net\",\n                        \"email_verified_at\": null,\n                        \"cpf\": \"339.564.376-61\",\n                        \"data_nascimento\": \"1982-05-28T00:00:00.000000Z\",\n                        \"created_at\": null,\n                        \"updated_at\": null,\n                        \"deleted_at\": null\n                    }\n                },\n                \"foto_pessoas\": [\n                    {\n                        \"id\": 1,\n                        \"user_id\": 1,\n                        \"data\": \"2025-03-31\",\n                        \"bucket\": \"sequi\",\n                        \"hash\": \"a98931d104a7fb8f30450547d97e7ca5\",\n                        \"created_at\": null,\n                        \"updated_at\": null,\n                        \"deleted_at\": null\n                    }\n                ]\n            },\n            {\n                \"id\": 2,\n                \"nome\": \"Dr. Emílio Galhardo Escobar Filho\",\n                \"email\": \"maldonado.gabrielly@example.org\",\n                \"email_verified_at\": null,\n                \"cpf\": \"170.170.508-19\",\n                \"data_nascimento\": \"1996-11-02T00:00:00.000000Z\",\n                \"created_at\": null,\n                \"updated_at\": null,\n                \"deleted_at\": null,\n                \"servidores_temporarios_completo\": {\n                    \"id\": 2,\n                    \"user_id\": 2,\n                    \"data_admissao\": \"2019-01-18\",\n                    \"data_desligamento\": null,\n                    \"created_at\": null,\n                    \"updated_at\": null,\n                    \"deleted_at\": null,\n                    \"user\": {\n                        \"id\": 2,\n                        \"nome\": \"Dr. Emílio Galhardo Escobar Filho\",\n                        \"email\": \"maldonado.gabrielly@example.org\",\n                        \"email_verified_at\": null,\n                        \"cpf\": \"170.170.508-19\",\n                        \"data_nascimento\": \"1996-11-02T00:00:00.000000Z\",\n                        \"created_at\": null,\n                        \"updated_at\": null,\n                        \"deleted_at\": null\n                    }\n                },\n                \"servidores_efetivos_completo\": {\n                    \"id\": 2,\n                    \"user_id\": 2,\n                    \"matricula\": \"qf-4683\",\n                    \"created_at\": null,\n                    \"updated_at\": null,\n                    \"deleted_at\": null,\n                    \"user\": {\n                        \"id\": 2,\n                        \"nome\": \"Dr. Emílio Galhardo Escobar Filho\",\n                        \"email\": \"maldonado.gabrielly@example.org\",\n                        \"email_verified_at\": null,\n                        \"cpf\": \"170.170.508-19\",\n                        \"data_nascimento\": \"1996-11-02T00:00:00.000000Z\",\n                        \"created_at\": null,\n                        \"updated_at\": null,\n                        \"deleted_at\": null\n                    }\n                },\n                \"foto_pessoas\": [\n                    {\n                        \"id\": 2,\n                        \"user_id\": 2,\n                        \"data\": \"2025-03-31\",\n                        \"bucket\": \"sunt\",\n                        \"hash\": \"9d0b1714518907192490ce56247c01cf\",\n                        \"created_at\": null,\n                        \"updated_at\": null,\n                        \"deleted_at\": null\n                    }\n                ]\n            },\n            {\n                \"id\": 3,\n                \"nome\": \"Lilian Bezerra Jr.\",\n                \"email\": \"brito.benedito@example.com\",\n                \"email_verified_at\": null,\n                \"cpf\": \"463.369.382-26\",\n                \"data_nascimento\": \"1976-06-24T00:00:00.000000Z\",\n                \"created_at\": null,\n                \"updated_at\": null,\n                \"deleted_at\": null,\n                \"servidores_temporarios_completo\": {\n                    \"id\": 3,\n                    \"user_id\": 3,\n                    \"data_admissao\": \"1988-10-05\",\n                    \"data_desligamento\": null,\n                    \"created_at\": null,\n                    \"updated_at\": null,\n                    \"deleted_at\": null,\n                    \"user\": {\n                        \"id\": 3,\n                        \"nome\": \"Lilian Bezerra Jr.\",\n                        \"email\": \"brito.benedito@example.com\",\n                        \"email_verified_at\": null,\n                        \"cpf\": \"463.369.382-26\",\n                        \"data_nascimento\": \"1976-06-24T00:00:00.000000Z\",\n                        \"created_at\": null,\n                        \"updated_at\": null,\n                        \"deleted_at\": null\n                    }\n                },\n                \"servidores_efetivos_completo\": {\n                    \"id\": 3,\n                    \"user_id\": 3,\n                    \"matricula\": \"mq-7994\",\n                    \"created_at\": null,\n                    \"updated_at\": null,\n                    \"deleted_at\": null,\n                    \"user\": {\n                        \"id\": 3,\n                        \"nome\": \"Lilian Bezerra Jr.\",\n                        \"email\": \"brito.benedito@example.com\",\n                        \"email_verified_at\": null,\n                        \"cpf\": \"463.369.382-26\",\n                        \"data_nascimento\": \"1976-06-24T00:00:00.000000Z\",\n                        \"created_at\": null,\n                        \"updated_at\": null,\n                        \"deleted_at\": null\n                    }\n                },\n                \"foto_pessoas\": [\n                    {\n                        \"id\": 3,\n                        \"user_id\": 3,\n                        \"data\": \"2025-03-31\",\n                        \"bucket\": \"quia\",\n                        \"hash\": \"dabe6e597b70e5760826aea1dcc564f7\",\n                        \"created_at\": null,\n                        \"updated_at\": null,\n                        \"deleted_at\": null\n                    }\n                ]\n            }\n        ],\n        \"first_page_url\": \"http://localhost:8085/api/usuarios?page=1\",\n        \"from\": 1,\n        \"last_page\": 1,\n        \"last_page_url\": \"http://localhost:8085/api/usuarios?page=1\",\n        \"links\": [\n            {\n                \"url\": null,\n                \"label\": \"&laquo; Previous\",\n                \"active\": false\n            },\n            {\n                \"url\": \"http://localhost:8085/api/usuarios?page=1\",\n                \"label\": \"1\",\n                \"active\": true\n            },\n            {\n                \"url\": null,\n                \"label\": \"Next &raquo;\",\n                \"active\": false\n            }\n        ],\n        \"next_page_url\": null,\n        \"path\": \"http://localhost:8085/api/usuarios\",\n        \"per_page\": 10,\n        \"prev_page_url\": null,\n        \"to\": 3,\n        \"total\": 3\n    },\n    \"message\": null,\n    \"result\": true\n}"
						}
					]
				},
				{
					"name": "Criar Usuario",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"nome\": \"Wandre Alkimin\",\n\t\"email\": \"teste@gmgail.com\",\n    \"password\": \"12345678\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/registrar",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"registrar"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": [
						{
							"name": "Criar usuario",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nome\": \"Wandre Alkimin\",\n\t\"email\": \"teste@gmgail.com\",\n    \"password\": \"12345678\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/registrar",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"registrar"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Tue, 01 Apr 2025 22:44:59 GMT"
								},
								{
									"key": "Server",
									"value": "Apache/2.4.62 (Debian)"
								},
								{
									"key": "X-Powered-By",
									"value": "PHP/8.3.19"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, private"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "60"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "59"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "localhost:8085"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5, max=100"
								},
								{
									"key": "Connection",
									"value": "Keep-Alive"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"data\": {\n        \"nome\": \"Wandre Alkimin\",\n        \"email\": \"teste@gmgail.com\",\n        \"updated_at\": \"2025-04-01T22:45:04.000000Z\",\n        \"created_at\": \"2025-04-01T22:45:04.000000Z\",\n        \"id\": 17,\n        \"idade\": null\n    },\n    \"message\": \"Usuario registrado com sucesso\",\n    \"result\": true,\n    \"authorization\": {\n        \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgwODUvYXBpL3JlZ2lzdHJhciIsImlhdCI6MTc0MzU0NzUwNCwiZXhwIjoxNzQzNTQ3ODA0LCJuYmYiOjE3NDM1NDc1MDQsImp0aSI6IkhqeWpRc3dnV1Y1OU1SY3YiLCJzdWIiOiIxNyIsInBydiI6IjIzYmQ1Yzg5NDlmNjAwYWRiMzllNzAxYzQwMDg3MmRiN2E1OTc2ZjcifQ.6iHh64jAXpR9j26O3tmDLhDko_SFLstezyY-JJR5FHI\",\n        \"type\": \"bearer\"\n    }\n}"
						}
					]
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"teste@gmgail.com\",\n    \"password\": \"12345678\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"login"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": [
						{
							"name": "Login",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"email\": \"teste@gmgail.com\",\n    \"password\": \"12345678\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/login",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"login"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Tue, 01 Apr 2025 22:45:36 GMT"
								},
								{
									"key": "Server",
									"value": "Apache/2.4.62 (Debian)"
								},
								{
									"key": "X-Powered-By",
									"value": "PHP/8.3.19"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, private"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "60"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "57"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "localhost:8085"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5, max=100"
								},
								{
									"key": "Connection",
									"value": "Keep-Alive"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"data\": null,\n    \"message\": \"Login efetuado com sucesso\",\n    \"result\": true,\n    \"authorization\": {\n        \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgwODUvYXBpL2xvZ2luIiwiaWF0IjoxNzQzNTQ3NTQxLCJleHAiOjE3NDM1NDc4NDEsIm5iZiI6MTc0MzU0NzU0MSwianRpIjoiQjdOeVJld3paYjA0ZDVjYyIsInN1YiI6IjE3IiwicHJ2IjoiMjNiZDVjODk0OWY2MDBhZGIzOWU3MDFjNDAwODcyZGI3YTU5NzZmNyJ9.6AbgIHacKBunDUar2UgUzD4d_rd6AsPnuUO9tkPdpLw\",\n        \"type\": \"bearer\"\n    }\n}"
						}
					]
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgwODUvYXBpL2xvZ2luIiwiaWF0IjoxNzQzNTQ3OTUzLCJleHAiOjE3NDM1NDgyNTMsIm5iZiI6MTc0MzU0Nzk1MywianRpIjoiU2wzVU5jSVFKZ3B5M0YxZyIsInN1YiI6IjE3IiwicHJ2IjoiMjNiZDVjODk0OWY2MDBhZGIzOWU3MDFjNDAwODcyZGI3YTU5NzZmNyJ9.s-gOuD_KoID961yiLLYKofyLmQEOqbwN6m6qa1z6Apg",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/logout",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"logout"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": [
						{
							"name": "Logout",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgwODUvYXBpL2xvZ2luIiwiaWF0IjoxNzQzNTQ3OTUzLCJleHAiOjE3NDM1NDgyNTMsIm5iZiI6MTc0MzU0Nzk1MywianRpIjoiU2wzVU5jSVFKZ3B5M0YxZyIsInN1YiI6IjE3IiwicHJ2IjoiMjNiZDVjODk0OWY2MDBhZGIzOWU3MDFjNDAwODcyZGI3YTU5NzZmNyJ9.s-gOuD_KoID961yiLLYKofyLmQEOqbwN6m6qa1z6Apg",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/logout",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"logout"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Tue, 01 Apr 2025 22:53:15 GMT"
								},
								{
									"key": "Server",
									"value": "Apache/2.4.62 (Debian)"
								},
								{
									"key": "Vary",
									"value": "Authorization"
								},
								{
									"key": "X-Powered-By",
									"value": "PHP/8.3.19"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, private"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "60"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "58"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "localhost:8085"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5, max=100"
								},
								{
									"key": "Connection",
									"value": "Keep-Alive"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"data\": \"\",\n    \"message\": \"Usuario deslogado\",\n    \"result\": true\n}"
						}
					]
				},
				{
					"name": "Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgwODUvYXBpL2xvZ2luIiwiaWF0IjoxNzQzNTQ2MjkwLCJleHAiOjE3NDM1NDY1OTAsIm5iZiI6MTc0MzU0NjI5MCwianRpIjoiNDZ5a2txTExSN1FwT1MyayIsInN1YiI6IjE1IiwicHJ2IjoiMjNiZDVjODk0OWY2MDBhZGIzOWU3MDFjNDAwODcyZGI3YTU5NzZmNyJ9.wtiBffvktDeOJwHjP8GYOQxAlBoAbyGuYIJ1gCyICJI",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"wiawaanqdd9s7af@gmgail.com\",\n    \"password\": \"12345678\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/refresh",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"refresh"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": [
						{
							"name": "Refresh Token",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgwODUvYXBpL3JlZ2lzdHJhciIsImlhdCI6MTc0MzU0ODE0OCwiZXhwIjoxNzQzNTQ4NDQ5LCJuYmYiOjE3NDM1NDgxNDksImp0aSI6Ijh1bFhGVGsza2lBUmdmdHYiLCJzdWIiOiIxOCIsInBydiI6IjIzYmQ1Yzg5NDlmNjAwYWRiMzllNzAxYzQwMDg3MmRiN2E1OTc2ZjcifQ.l43RBoYPE9ZOtGORYbycHK3dimVTaJDTDCYIui8uatQ",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"email\": \"wiawaanqdd9s7af@gmgail.com\",\n    \"password\": \"12345678\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/refresh",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"refresh"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Tue, 01 Apr 2025 22:56:00 GMT"
								},
								{
									"key": "Server",
									"value": "Apache/2.4.62 (Debian)"
								},
								{
									"key": "Vary",
									"value": "Authorization"
								},
								{
									"key": "X-Powered-By",
									"value": "PHP/8.3.19"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, private"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "60"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "56"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "localhost:8085"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5, max=100"
								},
								{
									"key": "Connection",
									"value": "Keep-Alive"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"data\": null,\n    \"message\": \"Token atualizado\",\n    \"result\": true,\n    \"authorization\": {\n        \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgwODUvYXBpL3JlZnJlc2giLCJpYXQiOjE3NDM1NDgxNDgsImV4cCI6MTc0MzU0ODQ2NCwibmJmIjoxNzQzNTQ4MTY0LCJqdGkiOiJLazhrOWR3UzRwemZFQW8wIiwic3ViIjoiMTgiLCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3In0.W8F3cAC9ENsDR8WCCtXhm4jW_8mASWl2QqXNrusPej0\",\n        \"type\": \"bearer\"\n    }\n}"
						}
					]
				},
				{
					"name": "Update data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"nome\": \"Minha cidade 2 alem\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/usuarios/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"usuarios",
								"1"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Delete data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/usuarios/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"usuarios",
								"1"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/usuarios-search?with=enderecos&enderecos_logradouro=Avenida",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"usuarios-search"
							],
							"query": [
								{
									"key": "with",
									"value": "enderecos"
								},
								{
									"key": "nome",
									"value": "alkimin",
									"disabled": true
								},
								{
									"key": "enderecos_logradouro",
									"value": "Avenida",
									"description": "Exemplo de pesquisa dentro de um relacionamento"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": [
						{
							"name": "Search",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/usuarios-search?with=enderecos&enderecos_logradouro=Avenida",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"usuarios-search"
									],
									"query": [
										{
											"key": "with",
											"value": "enderecos"
										},
										{
											"key": "nome",
											"value": "alkimin",
											"disabled": true
										},
										{
											"key": "enderecos_logradouro",
											"value": "Avenida",
											"description": "Exemplo de pesquisa dentro de um relacionamento"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Tue, 01 Apr 2025 00:12:08 GMT"
								},
								{
									"key": "Server",
									"value": "Apache/2.4.62 (Debian)"
								},
								{
									"key": "X-Powered-By",
									"value": "PHP/8.3.19"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, private"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "60"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "58"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5, max=100"
								},
								{
									"key": "Connection",
									"value": "Keep-Alive"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"data\": {\n        \"current_page\": 1,\n        \"data\": [\n            {\n                \"id\": 1,\n                \"nome\": \"Sr. Cláudio Mendonça Alcantara\",\n                \"email\": \"vserra@example.net\",\n                \"email_verified_at\": null,\n                \"cpf\": \"339.564.376-61\",\n                \"data_nascimento\": \"1982-05-28T00:00:00.000000Z\",\n                \"created_at\": null,\n                \"updated_at\": null,\n                \"deleted_at\": null,\n                \"idade\": 42,\n                \"enderecos\": [\n                    {\n                        \"id\": 1,\n                        \"logradouro\": \"Avenida Madeira, 517. 279º Andar\",\n                        \"numero\": 279,\n                        \"bairro\": \"omnis\",\n                        \"cidade_id\": 1799,\n                        \"created_at\": null,\n                        \"updated_at\": null,\n                        \"deleted_at\": null,\n                        \"pivot\": {\n                            \"user_id\": 1,\n                            \"endereco_id\": 1,\n                            \"created_at\": \"2025-04-01T00:08:16.000000Z\",\n                            \"updated_at\": \"2025-04-01T00:08:16.000000Z\"\n                        }\n                    }\n                ]\n            },\n            {\n                \"id\": 4,\n                \"nome\": \"Wandre Alkimin\",\n                \"email\": \"wandre1997@gmail.com\",\n                \"email_verified_at\": null,\n                \"cpf\": null,\n                \"data_nascimento\": null,\n                \"created_at\": \"2025-04-01T00:00:11.000000Z\",\n                \"updated_at\": \"2025-04-01T00:00:11.000000Z\",\n                \"deleted_at\": null,\n                \"idade\": null,\n                \"enderecos\": [\n                    {\n                        \"id\": 1,\n                        \"logradouro\": \"Avenida Madeira, 517. 279º Andar\",\n                        \"numero\": 279,\n                        \"bairro\": \"omnis\",\n                        \"cidade_id\": 1799,\n                        \"created_at\": null,\n                        \"updated_at\": null,\n                        \"deleted_at\": null,\n                        \"pivot\": {\n                            \"user_id\": 4,\n                            \"endereco_id\": 1,\n                            \"created_at\": \"2025-04-01T00:09:20.000000Z\",\n                            \"updated_at\": \"2025-04-01T00:09:20.000000Z\"\n                        }\n                    }\n                ]\n            }\n        ],\n        \"first_page_url\": \"http://localhost:8085/api/usuarios-search?page=1\",\n        \"from\": 1,\n        \"last_page\": 1,\n        \"last_page_url\": \"http://localhost:8085/api/usuarios-search?page=1\",\n        \"links\": [\n            {\n                \"url\": null,\n                \"label\": \"&laquo; Previous\",\n                \"active\": false\n            },\n            {\n                \"url\": \"http://localhost:8085/api/usuarios-search?page=1\",\n                \"label\": \"1\",\n                \"active\": true\n            },\n            {\n                \"url\": null,\n                \"label\": \"Next &raquo;\",\n                \"active\": false\n            }\n        ],\n        \"next_page_url\": null,\n        \"path\": \"http://localhost:8085/api/usuarios-search\",\n        \"per_page\": 10,\n        \"prev_page_url\": null,\n        \"to\": 2,\n        \"total\": 2\n    },\n    \"message\": \"Resultado recuperado com sucesso\",\n    \"result\": true\n}"
						}
					]
				}
			]
		},
		{
			"name": "Estados",
			"item": [
				{
					"name": "Get data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgwODUvYXBpL2xvZ2luIiwiaWF0IjoxNzQzNTQ3NDM4LCJleHAiOjE3NDM1NDc3MzgsIm5iZiI6MTc0MzU0NzQzOCwianRpIjoiQUtlVVBTM3ExOHhZclQwYyIsInN1YiI6IjE1IiwicHJ2IjoiMjNiZDVjODk0OWY2MDBhZGIzOWU3MDFjNDAwODcyZGI3YTU5NzZmNyJ9.nKNuTnBl56x8KaQ7XdEBrgo8Jj9Z0VGMxFQjOjwxEfs",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "with",
									"value": "cidades",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/estados?with=cidades",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"estados"
							],
							"query": [
								{
									"key": "with",
									"value": "cidades"
								},
								{
									"key": "Authorization",
									"value": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgwODUvYXBpL2xvZ2luIiwiaWF0IjoxNzQzNTQ0ODcwLCJleHAiOjE3NDM1NDUxNzAsIm5iZiI6MTc0MzU0NDg3MCwianRpIjoiak5ZMkVKQVlram8waXZOUCIsInN1YiI6IjE1IiwicHJ2IjoiMjNiZDVjODk0OWY2MDBhZGIzOWU3MDFjNDAwODcyZGI3YTU5NzZmNyJ9.B1LNV_V4oulGpjHe8tBq61-mBICgQleTTGHOB6yY7co",
									"disabled": true
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": [
						{
							"name": "Get data",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/estados",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"estados"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 31 Mar 2025 00:00:03 GMT"
								},
								{
									"key": "Server",
									"value": "Apache/2.4.62 (Debian)"
								},
								{
									"key": "X-Powered-By",
									"value": "PHP/8.3.19"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, private"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "60"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "59"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5, max=100"
								},
								{
									"key": "Connection",
									"value": "Keep-Alive"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"data\": {\n        \"current_page\": 1,\n        \"data\": [\n            {\n                \"id\": 3,\n                \"sigla\": \"AP\",\n                \"nome\": \"AMAPÁ\",\n                \"created_at\": null,\n                \"updated_at\": null,\n                \"deleted_at\": null\n            },\n            {\n                \"id\": 4,\n                \"sigla\": \"AM\",\n                \"nome\": \"AMAZONAS\",\n                \"created_at\": null,\n                \"updated_at\": null,\n                \"deleted_at\": null\n            },\n            {\n                \"id\": 5,\n                \"sigla\": \"BA\",\n                \"nome\": \"BAHIA\",\n                \"created_at\": null,\n                \"updated_at\": null,\n                \"deleted_at\": null\n            },\n            {\n                \"id\": 6,\n                \"sigla\": \"CE\",\n                \"nome\": \"CEARÁ\",\n                \"created_at\": null,\n                \"updated_at\": null,\n                \"deleted_at\": null\n            },\n            {\n                \"id\": 7,\n                \"sigla\": \"DF\",\n                \"nome\": \"DISTRITO FEDERAL\",\n                \"created_at\": null,\n                \"updated_at\": null,\n                \"deleted_at\": null\n            },\n            {\n                \"id\": 8,\n                \"sigla\": \"ES\",\n                \"nome\": \"ESPÍRITO SANTO\",\n                \"created_at\": null,\n                \"updated_at\": null,\n                \"deleted_at\": null\n            },\n            {\n                \"id\": 9,\n                \"sigla\": \"RR\",\n                \"nome\": \"RORAIMA\",\n                \"created_at\": null,\n                \"updated_at\": null,\n                \"deleted_at\": null\n            },\n            {\n                \"id\": 10,\n                \"sigla\": \"GO\",\n                \"nome\": \"GOIÁS\",\n                \"created_at\": null,\n                \"updated_at\": null,\n                \"deleted_at\": null\n            },\n            {\n                \"id\": 11,\n                \"sigla\": \"MA\",\n                \"nome\": \"MARANHÃO\",\n                \"created_at\": null,\n                \"updated_at\": null,\n                \"deleted_at\": null\n            },\n            {\n                \"id\": 12,\n                \"sigla\": \"MT\",\n                \"nome\": \"MATO GROSSO\",\n                \"created_at\": null,\n                \"updated_at\": null,\n                \"deleted_at\": null\n            }\n        ],\n        \"first_page_url\": \"http://localhost:8085/api/estados?page=1\",\n        \"from\": 1,\n        \"last_page\": 3,\n        \"last_page_url\": \"http://localhost:8085/api/estados?page=3\",\n        \"links\": [\n            {\n                \"url\": null,\n                \"label\": \"&laquo; Previous\",\n                \"active\": false\n            },\n            {\n                \"url\": \"http://localhost:8085/api/estados?page=1\",\n                \"label\": \"1\",\n                \"active\": true\n            },\n            {\n                \"url\": \"http://localhost:8085/api/estados?page=2\",\n                \"label\": \"2\",\n                \"active\": false\n            },\n            {\n                \"url\": \"http://localhost:8085/api/estados?page=3\",\n                \"label\": \"3\",\n                \"active\": false\n            },\n            {\n                \"url\": \"http://localhost:8085/api/estados?page=2\",\n                \"label\": \"Next &raquo;\",\n                \"active\": false\n            }\n        ],\n        \"next_page_url\": \"http://localhost:8085/api/estados?page=2\",\n        \"path\": \"http://localhost:8085/api/estados\",\n        \"per_page\": 10,\n        \"prev_page_url\": null,\n        \"to\": 10,\n        \"total\": 27\n    },\n    \"message\": null,\n    \"result\": true\n}"
						}
					]
				},
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/estados-search?with=cidades&sigla=df&nome=am",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"estados-search"
							],
							"query": [
								{
									"key": "with",
									"value": "cidades"
								},
								{
									"key": "sigla",
									"value": "df"
								},
								{
									"key": "nome",
									"value": "am"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": [
						{
							"name": "search",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/estados-search?sigla=DF&with=cidades",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"estados-search"
									],
									"query": [
										{
											"key": "sigla",
											"value": "DF"
										},
										{
											"key": "with",
											"value": "cidades"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Sun, 30 Mar 2025 23:59:08 GMT"
								},
								{
									"key": "Server",
									"value": "Apache/2.4.62 (Debian)"
								},
								{
									"key": "X-Powered-By",
									"value": "PHP/8.3.19"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, private"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "60"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "58"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5, max=100"
								},
								{
									"key": "Connection",
									"value": "Keep-Alive"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"data\": {\n        \"current_page\": 1,\n        \"data\": [\n            {\n                \"id\": 7,\n                \"sigla\": \"DF\",\n                \"nome\": \"DISTRITO FEDERAL\",\n                \"created_at\": null,\n                \"updated_at\": null,\n                \"deleted_at\": null,\n                \"cidades\": [\n                    {\n                        \"id\": 1799,\n                        \"estado_id\": 7,\n                        \"nome\": \"BRASÍLIA\",\n                        \"created_at\": null,\n                        \"updated_at\": null,\n                        \"deleted_at\": null\n                    },\n                    {\n                        \"id\": 1800,\n                        \"estado_id\": 7,\n                        \"nome\": \"BRAZLÂNDIA\",\n                        \"created_at\": null,\n                        \"updated_at\": null,\n                        \"deleted_at\": null\n                    },\n                    {\n                        \"id\": 1801,\n                        \"estado_id\": 7,\n                        \"nome\": \"CANDANGOLÂNDIA\",\n                        \"created_at\": null,\n                        \"updated_at\": null,\n                        \"deleted_at\": null\n                    },\n                    {\n                        \"id\": 1802,\n                        \"estado_id\": 7,\n                        \"nome\": \"CEILÂNDIA\",\n                        \"created_at\": null,\n                        \"updated_at\": null,\n                        \"deleted_at\": null\n                    },\n                    {\n                        \"id\": 1803,\n                        \"estado_id\": 7,\n                        \"nome\": \"CRUZEIRO\",\n                        \"created_at\": null,\n                        \"updated_at\": null,\n                        \"deleted_at\": null\n                    },\n                    {\n                        \"id\": 1804,\n                        \"estado_id\": 7,\n                        \"nome\": \"GAMA\",\n                        \"created_at\": null,\n                        \"updated_at\": null,\n                        \"deleted_at\": null\n                    },\n                    {\n                        \"id\": 1805,\n                        \"estado_id\": 7,\n                        \"nome\": \"GUARÁ\",\n                        \"created_at\": null,\n                        \"updated_at\": null,\n                        \"deleted_at\": null\n                    },\n                    {\n                        \"id\": 1806,\n                        \"estado_id\": 7,\n                        \"nome\": \"LAGO NORTE\",\n                        \"created_at\": null,\n                        \"updated_at\": null,\n                        \"deleted_at\": null\n                    },\n                    {\n                        \"id\": 1807,\n                        \"estado_id\": 7,\n                        \"nome\": \"LAGO SUL\",\n                        \"created_at\": null,\n                        \"updated_at\": null,\n                        \"deleted_at\": null\n                    },\n                    {\n                        \"id\": 1808,\n                        \"estado_id\": 7,\n                        \"nome\": \"NÚCLEO BANDEIRANTE\",\n                        \"created_at\": null,\n                        \"updated_at\": null,\n                        \"deleted_at\": null\n                    },\n                    {\n                        \"id\": 1809,\n                        \"estado_id\": 7,\n                        \"nome\": \"PARANOÁ\",\n                        \"created_at\": null,\n                        \"updated_at\": null,\n                        \"deleted_at\": null\n                    },\n                    {\n                        \"id\": 1810,\n                        \"estado_id\": 7,\n                        \"nome\": \"PLANALTINA\",\n                        \"created_at\": null,\n                        \"updated_at\": null,\n                        \"deleted_at\": null\n                    },\n                    {\n                        \"id\": 1811,\n                        \"estado_id\": 7,\n                        \"nome\": \"RECANTO DAS EMAS\",\n                        \"created_at\": null,\n                        \"updated_at\": null,\n                        \"deleted_at\": null\n                    },\n                    {\n                        \"id\": 1812,\n                        \"estado_id\": 7,\n                        \"nome\": \"RIACHO FUNDO\",\n                        \"created_at\": null,\n                        \"updated_at\": null,\n                        \"deleted_at\": null\n                    },\n                    {\n                        \"id\": 1813,\n                        \"estado_id\": 7,\n                        \"nome\": \"SAMAMBAIA\",\n                        \"created_at\": null,\n                        \"updated_at\": null,\n                        \"deleted_at\": null\n                    },\n                    {\n                        \"id\": 1814,\n                        \"estado_id\": 7,\n                        \"nome\": \"SANTA MARIA\",\n                        \"created_at\": null,\n                        \"updated_at\": null,\n                        \"deleted_at\": null\n                    },\n                    {\n                        \"id\": 1815,\n                        \"estado_id\": 7,\n                        \"nome\": \"SÃO SEBASTIÃO\",\n                        \"created_at\": null,\n                        \"updated_at\": null,\n                        \"deleted_at\": null\n                    },\n                    {\n                        \"id\": 1816,\n                        \"estado_id\": 7,\n                        \"nome\": \"SOBRADINHO\",\n                        \"created_at\": null,\n                        \"updated_at\": null,\n                        \"deleted_at\": null\n                    },\n                    {\n                        \"id\": 1817,\n                        \"estado_id\": 7,\n                        \"nome\": \"TAGUATINGA\",\n                        \"created_at\": null,\n                        \"updated_at\": null,\n                        \"deleted_at\": null\n                    }\n                ]\n            }\n        ],\n        \"first_page_url\": \"http://localhost:8085/api/estados-search?page=1\",\n        \"from\": 1,\n        \"last_page\": 1,\n        \"last_page_url\": \"http://localhost:8085/api/estados-search?page=1\",\n        \"links\": [\n            {\n                \"url\": null,\n                \"label\": \"&laquo; Previous\",\n                \"active\": false\n            },\n            {\n                \"url\": \"http://localhost:8085/api/estados-search?page=1\",\n                \"label\": \"1\",\n                \"active\": true\n            },\n            {\n                \"url\": null,\n                \"label\": \"Next &raquo;\",\n                \"active\": false\n            }\n        ],\n        \"next_page_url\": null,\n        \"path\": \"http://localhost:8085/api/estados-search\",\n        \"per_page\": 10,\n        \"prev_page_url\": null,\n        \"to\": 1,\n        \"total\": 1\n    },\n    \"message\": \"Resultado recuperado com sucesso\",\n    \"result\": true\n}"
						}
					]
				},
				{
					"name": "Post data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"sigla\": \"WE\",\n\t\"nome\": \"Wandre Estado\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/estados",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"estados"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": [
						{
							"name": "Post data",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"sigla\": \"WE\",\n\t\"nome\": \"Wandre Estado\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/estados",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"estados"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 31 Mar 2025 00:00:35 GMT"
								},
								{
									"key": "Server",
									"value": "Apache/2.4.62 (Debian)"
								},
								{
									"key": "X-Powered-By",
									"value": "PHP/8.3.19"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, private"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "60"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "57"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5, max=100"
								},
								{
									"key": "Connection",
									"value": "Keep-Alive"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"data\": {\n        \"sigla\": \"WE\",\n        \"nome\": \"Wandre Estado\",\n        \"updated_at\": \"2025-03-31T00:00:37.000000Z\",\n        \"created_at\": \"2025-03-31T00:00:37.000000Z\",\n        \"id\": 31\n    },\n    \"message\": \"Item criado com sucesso\",\n    \"result\": true\n}"
						}
					]
				},
				{
					"name": "Update data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"sigla\": \"WE\",\n\t\"nome\": \"Wandre Estado\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/estados/2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"estados",
								"2"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Delete data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/estados/2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"estados",
								"2"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				}
			]
		},
		{
			"name": "Cidades",
			"item": [
				{
					"name": "Get data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/cidades",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cidades"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Post data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"estado_id\": 2,\n\t\"nome\": \"Minha Cidade\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/cidades",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cidades"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Update data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"nome\": \"Minha cidade 2 alem\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/cidades/10025",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cidades",
								"10025"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Delete data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/cidades/10025",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cidades",
								"10025"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/cidades-search?id=1799",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cidades-search"
							],
							"query": [
								{
									"key": "with",
									"value": "estado",
									"disabled": true
								},
								{
									"key": "nome",
									"value": "brasília",
									"disabled": true
								},
								{
									"key": "id",
									"value": "1799",
									"description": "Id brasilia"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				}
			]
		},
		{
			"name": "Endereços",
			"item": [
				{
					"name": "Get data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/enderecos?with=cidade,unidades,usuarios",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"enderecos"
							],
							"query": [
								{
									"key": "with",
									"value": "cidade,unidades,usuarios"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": [
						{
							"name": "Get data",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/enderecos?with=cidade,unidades,usuarios",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"enderecos"
									],
									"query": [
										{
											"key": "with",
											"value": "cidade,unidades,usuarios"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 31 Mar 2025 00:45:23 GMT"
								},
								{
									"key": "Server",
									"value": "Apache/2.4.62 (Debian)"
								},
								{
									"key": "X-Powered-By",
									"value": "PHP/8.3.19"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, private"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "60"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "58"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5, max=100"
								},
								{
									"key": "Connection",
									"value": "Keep-Alive"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"data\": {\n        \"current_page\": 1,\n        \"data\": [\n            {\n                \"id\": 1,\n                \"logradouro\": \"Ap\",\n                \"numero\": 101,\n                \"bairro\": \"Valparaiso\",\n                \"cidade_id\": 1799,\n                \"created_at\": \"2025-03-31T00:40:47.000000Z\",\n                \"updated_at\": \"2025-03-31T00:40:47.000000Z\",\n                \"deleted_at\": null,\n                \"cidade\": {\n                    \"id\": 1799,\n                    \"estado_id\": 7,\n                    \"nome\": \"BRASÍLIA\",\n                    \"created_at\": null,\n                    \"updated_at\": null,\n                    \"deleted_at\": null\n                },\n                \"unidades\": [],\n                \"usuarios\": []\n            },\n            {\n                \"id\": 2,\n                \"logradouro\": \"Ap\",\n                \"numero\": 101,\n                \"bairro\": \"Valparaiso\",\n                \"cidade_id\": 1799,\n                \"created_at\": \"2025-03-31T00:41:26.000000Z\",\n                \"updated_at\": \"2025-03-31T00:41:26.000000Z\",\n                \"deleted_at\": null,\n                \"cidade\": {\n                    \"id\": 1799,\n                    \"estado_id\": 7,\n                    \"nome\": \"BRASÍLIA\",\n                    \"created_at\": null,\n                    \"updated_at\": null,\n                    \"deleted_at\": null\n                },\n                \"unidades\": [],\n                \"usuarios\": []\n            }\n        ],\n        \"first_page_url\": \"http://localhost:8085/api/enderecos?page=1\",\n        \"from\": 1,\n        \"last_page\": 1,\n        \"last_page_url\": \"http://localhost:8085/api/enderecos?page=1\",\n        \"links\": [\n            {\n                \"url\": null,\n                \"label\": \"&laquo; Previous\",\n                \"active\": false\n            },\n            {\n                \"url\": \"http://localhost:8085/api/enderecos?page=1\",\n                \"label\": \"1\",\n                \"active\": true\n            },\n            {\n                \"url\": null,\n                \"label\": \"Next &raquo;\",\n                \"active\": false\n            }\n        ],\n        \"next_page_url\": null,\n        \"path\": \"http://localhost:8085/api/enderecos\",\n        \"per_page\": 10,\n        \"prev_page_url\": null,\n        \"to\": 2,\n        \"total\": 2\n    },\n    \"message\": null,\n    \"result\": true\n}"
						}
					]
				},
				{
					"name": "Post data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"cidade_id\": 1799,\n\t\"bairro\": \"Valparaiso\",\n    \"numero\":\"101\",\n    \"logradouro\":\"Ap\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/enderecos",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"enderecos"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": [
						{
							"name": "Post data",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"cidade_id\": 1799,\n\t\"bairro\": \"Valparaiso\",\n    \"numero\":\"101\",\n    \"logradouro\":\"Ap\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/enderecos",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"enderecos"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 31 Mar 2025 00:40:44 GMT"
								},
								{
									"key": "Server",
									"value": "Apache/2.4.62 (Debian)"
								},
								{
									"key": "X-Powered-By",
									"value": "PHP/8.3.19"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, private"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "60"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "59"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5, max=100"
								},
								{
									"key": "Connection",
									"value": "Keep-Alive"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"data\": {\n        \"cidade_id\": 1799,\n        \"bairro\": \"Valparaiso\",\n        \"numero\": \"101\",\n        \"logradouro\": \"Ap\",\n        \"updated_at\": \"2025-03-31T00:40:47.000000Z\",\n        \"created_at\": \"2025-03-31T00:40:47.000000Z\",\n        \"id\": 1\n    },\n    \"message\": \"Item criado com sucesso\",\n    \"result\": true\n}"
						}
					]
				},
				{
					"name": "Update data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"nome\": \"Minha cidade 2 alem\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/enderecos/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"enderecos",
								"1"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Delete data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/enderecos/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"enderecos",
								"1"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/enderecos-search?",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"enderecos-search"
							],
							"query": [
								{
									"key": "with",
									"value": "estado",
									"disabled": true
								},
								{
									"key": "nome",
									"value": "brasília",
									"disabled": true
								},
								{
									"key": "",
									"value": null
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				}
			]
		},
		{
			"name": "Foto Pessoas",
			"item": [
				{
					"name": "Get data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/foto-pessoas",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"foto-pessoas"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "UploadFoto",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "foto",
									"type": "file",
									"src": "/C:/Users/re047739/Pictures/wandre.png"
								},
								{
									"key": "user_id",
									"value": "1",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/foto-pessoas",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"foto-pessoas"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"nome\": \"Minha cidade 2 alem\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/foto-pessoas/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"foto-pessoas",
								"1"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Delete data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/foto-pessoas/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"foto-pessoas",
								"1"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/foto-pessoas-search",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"foto-pessoas-search"
							],
							"query": [
								{
									"key": "with",
									"value": "estado",
									"disabled": true
								},
								{
									"key": "nome",
									"value": "brasília",
									"disabled": true
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				}
			]
		},
		{
			"name": "Lotaçoes",
			"item": [
				{
					"name": "Get data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/lotacoes",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"lotacoes"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Post data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"unidade_id\": 1,\n\t\"user_id\": \"1\",\n    \"data_lotacao\": \"03/01/1995\",\n    \"portaria\": \"01\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/lotacoes",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"lotacoes"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Update data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"nome\": \"Minha cidade 2 alem\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/lotacoes/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"lotacoes",
								"1"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Delete data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/lotacoes/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"lotacoes",
								"1"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/lotacoes-search",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"lotacoes-search"
							],
							"query": [
								{
									"key": "with",
									"value": "estado",
									"disabled": true
								},
								{
									"key": "nome",
									"value": "brasília",
									"disabled": true
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				}
			]
		},
		{
			"name": "Servidor Efetivo",
			"item": [
				{
					"name": "Get data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/servidores-efetivos?with=todosDados",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"servidores-efetivos"
							],
							"query": [
								{
									"key": "with",
									"value": "todosDados"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": [
						{
							"name": "Get data",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/servidores-efetivos?with=todosDados",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"servidores-efetivos"
									],
									"query": [
										{
											"key": "with",
											"value": "todosDados"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 31 Mar 2025 13:52:00 GMT"
								},
								{
									"key": "Server",
									"value": "Apache/2.4.62 (Debian)"
								},
								{
									"key": "X-Powered-By",
									"value": "PHP/8.3.19"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, private"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "60"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "58"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5, max=100"
								},
								{
									"key": "Connection",
									"value": "Keep-Alive"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"data\": {\n        \"current_page\": 1,\n        \"data\": [\n            {\n                \"id\": 1,\n                \"user_id\": 1,\n                \"matricula\": \"as-3546\",\n                \"created_at\": null,\n                \"updated_at\": null,\n                \"deleted_at\": null,\n                \"todos_dados\": {\n                    \"id\": 1,\n                    \"nome\": \"Sr. Cláudio Mendonça Alcantara\",\n                    \"email\": \"vserra@example.net\",\n                    \"email_verified_at\": null,\n                    \"cpf\": \"339.564.376-61\",\n                    \"data_nascimento\": \"1982-05-28T00:00:00.000000Z\",\n                    \"created_at\": null,\n                    \"updated_at\": null,\n                    \"deleted_at\": null,\n                    \"idade\": 42,\n                    \"lotacoes_unidades\": [\n                        {\n                            \"id\": 1,\n                            \"data_lotacao\": \"2003-07-11\",\n                            \"data_remocao\": null,\n                            \"portaria\": \"Portaria-0699\",\n                            \"user_id\": 1,\n                            \"unidade_id\": 8,\n                            \"created_at\": null,\n                            \"updated_at\": null,\n                            \"deleted_at\": null,\n                            \"unidade\": {\n                                \"id\": 8,\n                                \"nome\": \"Serna e Rocha Ltda.\",\n                                \"sigla\": \"RAG\",\n                                \"created_at\": null,\n                                \"updated_at\": null,\n                                \"deleted_at\": null\n                            }\n                        }\n                    ],\n                    \"foto_pessoas\": [\n                        {\n                            \"id\": 1,\n                            \"user_id\": 1,\n                            \"data\": \"2025-03-31\",\n                            \"bucket\": \"sequi\",\n                            \"hash\": \"a98931d104a7fb8f30450547d97e7ca5\",\n                            \"created_at\": null,\n                            \"updated_at\": null,\n                            \"deleted_at\": null\n                        }\n                    ]\n                }\n            },\n            {\n                \"id\": 2,\n                \"user_id\": 2,\n                \"matricula\": \"qf-4683\",\n                \"created_at\": null,\n                \"updated_at\": null,\n                \"deleted_at\": null,\n                \"todos_dados\": {\n                    \"id\": 2,\n                    \"nome\": \"Dr. Emílio Galhardo Escobar Filho\",\n                    \"email\": \"maldonado.gabrielly@example.org\",\n                    \"email_verified_at\": null,\n                    \"cpf\": \"170.170.508-19\",\n                    \"data_nascimento\": \"1996-11-02T00:00:00.000000Z\",\n                    \"created_at\": null,\n                    \"updated_at\": null,\n                    \"deleted_at\": null,\n                    \"idade\": 28,\n                    \"lotacoes_unidades\": [\n                        {\n                            \"id\": 2,\n                            \"data_lotacao\": \"1975-09-01\",\n                            \"data_remocao\": null,\n                            \"portaria\": \"Portaria-9335\",\n                            \"user_id\": 2,\n                            \"unidade_id\": 10,\n                            \"created_at\": null,\n                            \"updated_at\": null,\n                            \"deleted_at\": null,\n                            \"unidade\": {\n                                \"id\": 10,\n                                \"nome\": \"Queirós Comercial Ltda.\",\n                                \"sigla\": \"AUG\",\n                                \"created_at\": null,\n                                \"updated_at\": null,\n                                \"deleted_at\": null\n                            }\n                        }\n                    ],\n                    \"foto_pessoas\": [\n                        {\n                            \"id\": 2,\n                            \"user_id\": 2,\n                            \"data\": \"2025-03-31\",\n                            \"bucket\": \"sunt\",\n                            \"hash\": \"9d0b1714518907192490ce56247c01cf\",\n                            \"created_at\": null,\n                            \"updated_at\": null,\n                            \"deleted_at\": null\n                        }\n                    ]\n                }\n            },\n            {\n                \"id\": 3,\n                \"user_id\": 3,\n                \"matricula\": \"mq-7994\",\n                \"created_at\": null,\n                \"updated_at\": null,\n                \"deleted_at\": null,\n                \"todos_dados\": {\n                    \"id\": 3,\n                    \"nome\": \"Lilian Bezerra Jr.\",\n                    \"email\": \"brito.benedito@example.com\",\n                    \"email_verified_at\": null,\n                    \"cpf\": \"463.369.382-26\",\n                    \"data_nascimento\": \"1976-06-24T00:00:00.000000Z\",\n                    \"created_at\": null,\n                    \"updated_at\": null,\n                    \"deleted_at\": null,\n                    \"idade\": 48,\n                    \"lotacoes_unidades\": [\n                        {\n                            \"id\": 3,\n                            \"data_lotacao\": \"1982-05-05\",\n                            \"data_remocao\": null,\n                            \"portaria\": \"Portaria-3022\",\n                            \"user_id\": 3,\n                            \"unidade_id\": 1,\n                            \"created_at\": null,\n                            \"updated_at\": null,\n                            \"deleted_at\": null,\n                            \"unidade\": {\n                                \"id\": 1,\n                                \"nome\": \"Deverso Comercial Ltda.\",\n                                \"sigla\": \"DYB\",\n                                \"created_at\": null,\n                                \"updated_at\": null,\n                                \"deleted_at\": null\n                            }\n                        }\n                    ],\n                    \"foto_pessoas\": [\n                        {\n                            \"id\": 3,\n                            \"user_id\": 3,\n                            \"data\": \"2025-03-31\",\n                            \"bucket\": \"quia\",\n                            \"hash\": \"dabe6e597b70e5760826aea1dcc564f7\",\n                            \"created_at\": null,\n                            \"updated_at\": null,\n                            \"deleted_at\": null\n                        }\n                    ]\n                }\n            }\n        ],\n        \"first_page_url\": \"http://localhost:8085/api/servidores-efetivos?page=1\",\n        \"from\": 1,\n        \"last_page\": 1,\n        \"last_page_url\": \"http://localhost:8085/api/servidores-efetivos?page=1\",\n        \"links\": [\n            {\n                \"url\": null,\n                \"label\": \"&laquo; Previous\",\n                \"active\": false\n            },\n            {\n                \"url\": \"http://localhost:8085/api/servidores-efetivos?page=1\",\n                \"label\": \"1\",\n                \"active\": true\n            },\n            {\n                \"url\": null,\n                \"label\": \"Next &raquo;\",\n                \"active\": false\n            }\n        ],\n        \"next_page_url\": null,\n        \"path\": \"http://localhost:8085/api/servidores-efetivos\",\n        \"per_page\": 10,\n        \"prev_page_url\": null,\n        \"to\": 3,\n        \"total\": 3\n    },\n    \"message\": null,\n    \"result\": true\n}"
						}
					]
				},
				{
					"name": "Post data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user_id\": 1,\n\t\"matricula\": \"1233\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/servidores-efetivos",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"servidores-efetivos"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Update data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"nome\": \"Minha cidade 2 alem\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/servidores-efetivos/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"servidores-efetivos",
								"1"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Delete data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/servidores-efetivos/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"servidores-efetivos",
								"1"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/servidores-efetivos-search?with=todosDados&user_nome=Mendonça",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"servidores-efetivos-search"
							],
							"query": [
								{
									"key": "with",
									"value": "todosDados"
								},
								{
									"key": "user_nome",
									"value": "Mendonça",
									"description": "Nome da relação + nome do campo"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": [
						{
							"name": "Search",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/servidores-efetivos-search?with=todosDados&user_nome=Mendonça",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"servidores-efetivos-search"
									],
									"query": [
										{
											"key": "with",
											"value": "todosDados"
										},
										{
											"key": "user_nome",
											"value": "Mendonça",
											"description": "Nome da relação + nome do campo"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 31 Mar 2025 23:56:33 GMT"
								},
								{
									"key": "Server",
									"value": "Apache/2.4.62 (Debian)"
								},
								{
									"key": "X-Powered-By",
									"value": "PHP/8.3.19"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, private"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "60"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "59"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5, max=100"
								},
								{
									"key": "Connection",
									"value": "Keep-Alive"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"data\": {\n        \"current_page\": 1,\n        \"data\": [\n            {\n                \"id\": 1,\n                \"user_id\": 1,\n                \"matricula\": \"as-3546\",\n                \"created_at\": null,\n                \"updated_at\": null,\n                \"deleted_at\": null,\n                \"todos_dados\": {\n                    \"id\": 1,\n                    \"nome\": \"Sr. Cláudio Mendonça Alcantara\",\n                    \"email\": \"vserra@example.net\",\n                    \"email_verified_at\": null,\n                    \"cpf\": \"339.564.376-61\",\n                    \"data_nascimento\": \"1982-05-28T00:00:00.000000Z\",\n                    \"created_at\": null,\n                    \"updated_at\": null,\n                    \"deleted_at\": null,\n                    \"idade\": 42,\n                    \"lotacoes_unidades\": [\n                        {\n                            \"id\": 1,\n                            \"data_lotacao\": \"2003-07-11\",\n                            \"data_remocao\": null,\n                            \"portaria\": \"Portaria-0699\",\n                            \"user_id\": 1,\n                            \"unidade_id\": 8,\n                            \"created_at\": null,\n                            \"updated_at\": null,\n                            \"deleted_at\": null,\n                            \"unidade\": {\n                                \"id\": 8,\n                                \"nome\": \"Serna e Rocha Ltda.\",\n                                \"sigla\": \"RAG\",\n                                \"created_at\": null,\n                                \"updated_at\": null,\n                                \"deleted_at\": null,\n                                \"enderecos\": []\n                            }\n                        },\n                        {\n                            \"id\": 4,\n                            \"data_lotacao\": \"1995-03-01\",\n                            \"data_remocao\": null,\n                            \"portaria\": \"01\",\n                            \"user_id\": 1,\n                            \"unidade_id\": 1,\n                            \"created_at\": \"2025-03-31T23:48:38.000000Z\",\n                            \"updated_at\": \"2025-03-31T23:48:38.000000Z\",\n                            \"deleted_at\": null,\n                            \"unidade\": {\n                                \"id\": 1,\n                                \"nome\": \"Deverso Comercial Ltda.\",\n                                \"sigla\": \"DYB\",\n                                \"created_at\": null,\n                                \"updated_at\": null,\n                                \"deleted_at\": null,\n                                \"enderecos\": [\n                                    {\n                                        \"id\": 1,\n                                        \"logradouro\": \"Avenida Madeira, 517. 279º Andar\",\n                                        \"numero\": 279,\n                                        \"bairro\": \"omnis\",\n                                        \"cidade_id\": 1799,\n                                        \"created_at\": null,\n                                        \"updated_at\": null,\n                                        \"deleted_at\": null,\n                                        \"pivot\": {\n                                            \"unidade_id\": 1,\n                                            \"endereco_id\": 1,\n                                            \"created_at\": \"2025-03-31T23:43:32.000000Z\",\n                                            \"updated_at\": \"2025-03-31T23:43:32.000000Z\"\n                                        }\n                                    }\n                                ]\n                            }\n                        },\n                        {\n                            \"id\": 5,\n                            \"data_lotacao\": \"1995-03-01\",\n                            \"data_remocao\": null,\n                            \"portaria\": \"01\",\n                            \"user_id\": 1,\n                            \"unidade_id\": 1,\n                            \"created_at\": \"2025-03-31T23:50:16.000000Z\",\n                            \"updated_at\": \"2025-03-31T23:50:16.000000Z\",\n                            \"deleted_at\": null,\n                            \"unidade\": {\n                                \"id\": 1,\n                                \"nome\": \"Deverso Comercial Ltda.\",\n                                \"sigla\": \"DYB\",\n                                \"created_at\": null,\n                                \"updated_at\": null,\n                                \"deleted_at\": null,\n                                \"enderecos\": [\n                                    {\n                                        \"id\": 1,\n                                        \"logradouro\": \"Avenida Madeira, 517. 279º Andar\",\n                                        \"numero\": 279,\n                                        \"bairro\": \"omnis\",\n                                        \"cidade_id\": 1799,\n                                        \"created_at\": null,\n                                        \"updated_at\": null,\n                                        \"deleted_at\": null,\n                                        \"pivot\": {\n                                            \"unidade_id\": 1,\n                                            \"endereco_id\": 1,\n                                            \"created_at\": \"2025-03-31T23:43:32.000000Z\",\n                                            \"updated_at\": \"2025-03-31T23:43:32.000000Z\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    ],\n                    \"foto_pessoas\": [\n                        {\n                            \"id\": 1,\n                            \"user_id\": 1,\n                            \"data\": \"2025-03-31\",\n                            \"bucket\": \"sequi\",\n                            \"hash\": \"a98931d104a7fb8f30450547d97e7ca5\",\n                            \"created_at\": null,\n                            \"updated_at\": null,\n                            \"deleted_at\": null\n                        }\n                    ]\n                }\n            }\n        ],\n        \"first_page_url\": \"http://localhost:8085/api/servidores-efetivos-search?page=1\",\n        \"from\": 1,\n        \"last_page\": 1,\n        \"last_page_url\": \"http://localhost:8085/api/servidores-efetivos-search?page=1\",\n        \"links\": [\n            {\n                \"url\": null,\n                \"label\": \"&laquo; Previous\",\n                \"active\": false\n            },\n            {\n                \"url\": \"http://localhost:8085/api/servidores-efetivos-search?page=1\",\n                \"label\": \"1\",\n                \"active\": true\n            },\n            {\n                \"url\": null,\n                \"label\": \"Next &raquo;\",\n                \"active\": false\n            }\n        ],\n        \"next_page_url\": null,\n        \"path\": \"http://localhost:8085/api/servidores-efetivos-search\",\n        \"per_page\": 10,\n        \"prev_page_url\": null,\n        \"to\": 1,\n        \"total\": 1\n    },\n    \"message\": \"Resultado recuperado com sucesso\",\n    \"result\": true\n}"
						}
					]
				}
			]
		},
		{
			"name": "Servidor Temporario",
			"item": [
				{
					"name": "Get data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/servidores-temporarios",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"servidores-temporarios"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Post data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user_id\": 4,\n    \"data_admissao\": \"03/01/1997\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/servidores-temporarios",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"servidores-temporarios"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Update data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"nome\": \"Minha cidade 2 alem\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/servidores-temporarios/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"servidores-temporarios",
								"1"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Delete data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/servidores-temporarios/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"servidores-temporarios",
								"1"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/servidores-temporarios-search",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"servidores-temporarios-search"
							],
							"query": [
								{
									"key": "with",
									"value": "estado",
									"disabled": true
								},
								{
									"key": "nome",
									"value": "brasília",
									"disabled": true
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				}
			]
		},
		{
			"name": "Unidade",
			"item": [
				{
					"name": "Get data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/unidades?with=enderecos&limit=100",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"unidades"
							],
							"query": [
								{
									"key": "with",
									"value": "enderecos"
								},
								{
									"key": "limit",
									"value": "100"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Post data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"nome\": \"dada\",\n\t\"sigla\": \"U02\",\n    \"id_enderecos\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/unidades",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"unidades"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Update data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"nome\": \"Minha cidade 2 alem\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/unidades/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"unidades",
								"1"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Delete data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/unidades/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"unidades",
								"1"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/unidades-search",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"unidades-search"
							],
							"query": [
								{
									"key": "with",
									"value": "estado",
									"disabled": true
								},
								{
									"key": "nome",
									"value": "brasília",
									"disabled": true
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				}
			]
		}
	]
}